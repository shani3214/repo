// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_GROUPNAME_H_
#define FLATBUFFERS_GENERATED_SCHEMA_GROUPNAME_H_

#include "flatbuffers/flatbuffers.h"

namespace GroupName {

struct GenderProperyKey;

struct Group;

struct person;

enum Gender {
  Gender_Male = 0,
  Gender_FeMale = 1,
  Gender_MIN = Gender_Male,
  Gender_MAX = Gender_FeMale
};

inline const Gender (&EnumValuesGender())[2] {
  static const Gender values[] = {
    Gender_Male,
    Gender_FeMale
  };
  return values;
}

inline const char * const *EnumNamesGender() {
  static const char * const names[] = {
    "Male",
    "FeMale",
    nullptr
  };
  return names;
}

inline const char *EnumNameGender(Gender e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesGender()[index];
}

struct GenderProperyKey FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_KEY = 4,
    VT_VALUE = 6
  };
  Gender Key() const {
    return static_cast<Gender>(GetField<int8_t>(VT_KEY, 0));
  }
  const flatbuffers::String *Value() const {
    return GetPointer<const flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_KEY) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(Value()) &&
           verifier.EndTable();
  }
};

struct GenderProperyKeyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Key(Gender Key) {
    fbb_.AddElement<int8_t>(GenderProperyKey::VT_KEY, static_cast<int8_t>(Key), 0);
  }
  void add_Value(flatbuffers::Offset<flatbuffers::String> Value) {
    fbb_.AddOffset(GenderProperyKey::VT_VALUE, Value);
  }
  explicit GenderProperyKeyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GenderProperyKeyBuilder &operator=(const GenderProperyKeyBuilder &);
  flatbuffers::Offset<GenderProperyKey> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GenderProperyKey>(end);
    return o;
  }
};

inline flatbuffers::Offset<GenderProperyKey> CreateGenderProperyKey(
    flatbuffers::FlatBufferBuilder &_fbb,
    Gender Key = Gender_Male,
    flatbuffers::Offset<flatbuffers::String> Value = 0) {
  GenderProperyKeyBuilder builder_(_fbb);
  builder_.add_Value(Value);
  builder_.add_Key(Key);
  return builder_.Finish();
}

inline flatbuffers::Offset<GenderProperyKey> CreateGenderProperyKeyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    Gender Key = Gender_Male,
    const char *Value = nullptr) {
  return GroupName::CreateGenderProperyKey(
      _fbb,
      Key,
      Value ? _fbb.CreateString(Value) : 0);
}

struct Group FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_GROUPNAME = 6
  };
  int32_t Id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const flatbuffers::String *GroupName() const {
    return GetPointer<const flatbuffers::String *>(VT_GROUPNAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_GROUPNAME) &&
           verifier.VerifyString(GroupName()) &&
           verifier.EndTable();
  }
};

struct GroupBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Id(int32_t Id) {
    fbb_.AddElement<int32_t>(Group::VT_ID, Id, 0);
  }
  void add_GroupName(flatbuffers::Offset<flatbuffers::String> GroupName) {
    fbb_.AddOffset(Group::VT_GROUPNAME, GroupName);
  }
  explicit GroupBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GroupBuilder &operator=(const GroupBuilder &);
  flatbuffers::Offset<Group> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Group>(end);
    return o;
  }
};

inline flatbuffers::Offset<Group> CreateGroup(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t Id = 0,
    flatbuffers::Offset<flatbuffers::String> GroupName = 0) {
  GroupBuilder builder_(_fbb);
  builder_.add_GroupName(GroupName);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Group> CreateGroupDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t Id = 0,
    const char *GroupName = nullptr) {
  return GroupName::CreateGroup(
      _fbb,
      Id,
      GroupName ? _fbb.CreateString(GroupName) : 0);
}

struct person FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_AGE = 6,
    VT_WEIGHT = 8,
    VT_GENDER = 10,
    VT_GROUPID = 12
  };
  const flatbuffers::String *Name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t Age() const {
    return GetField<int32_t>(VT_AGE, 0);
  }
  float Weight() const {
    return GetField<float>(VT_WEIGHT, 0.0f);
  }
  const flatbuffers::Vector<flatbuffers::Offset<GenderProperyKey>> *Gender() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<GenderProperyKey>> *>(VT_GENDER);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Group>> *Groupid() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Group>> *>(VT_GROUPID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(Name()) &&
           VerifyField<int32_t>(verifier, VT_AGE) &&
           VerifyField<float>(verifier, VT_WEIGHT) &&
           VerifyOffset(verifier, VT_GENDER) &&
           verifier.VerifyVector(Gender()) &&
           verifier.VerifyVectorOfTables(Gender()) &&
           VerifyOffset(verifier, VT_GROUPID) &&
           verifier.VerifyVector(Groupid()) &&
           verifier.VerifyVectorOfTables(Groupid()) &&
           verifier.EndTable();
  }
};

struct personBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Name(flatbuffers::Offset<flatbuffers::String> Name) {
    fbb_.AddOffset(person::VT_NAME, Name);
  }
  void add_Age(int32_t Age) {
    fbb_.AddElement<int32_t>(person::VT_AGE, Age, 0);
  }
  void add_Weight(float Weight) {
    fbb_.AddElement<float>(person::VT_WEIGHT, Weight, 0.0f);
  }
  void add_Gender(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GenderProperyKey>>> Gender) {
    fbb_.AddOffset(person::VT_GENDER, Gender);
  }
  void add_Groupid(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Group>>> Groupid) {
    fbb_.AddOffset(person::VT_GROUPID, Groupid);
  }
  explicit personBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  personBuilder &operator=(const personBuilder &);
  flatbuffers::Offset<person> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<person>(end);
    return o;
  }
};

inline flatbuffers::Offset<person> Createperson(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> Name = 0,
    int32_t Age = 0,
    float Weight = 0.0f,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GenderProperyKey>>> Gender = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Group>>> Groupid = 0) {
  personBuilder builder_(_fbb);
  builder_.add_Groupid(Groupid);
  builder_.add_Gender(Gender);
  builder_.add_Weight(Weight);
  builder_.add_Age(Age);
  builder_.add_Name(Name);
  return builder_.Finish();
}

inline flatbuffers::Offset<person> CreatepersonDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *Name = nullptr,
    int32_t Age = 0,
    float Weight = 0.0f,
    const std::vector<flatbuffers::Offset<GenderProperyKey>> *Gender = nullptr,
    const std::vector<flatbuffers::Offset<Group>> *Groupid = nullptr) {
  return GroupName::Createperson(
      _fbb,
      Name ? _fbb.CreateString(Name) : 0,
      Age,
      Weight,
      Gender ? _fbb.CreateVector<flatbuffers::Offset<GenderProperyKey>>(*Gender) : 0,
      Groupid ? _fbb.CreateVector<flatbuffers::Offset<Group>>(*Groupid) : 0);
}

inline const GroupName::Group *GetGroup(const void *buf) {
  return flatbuffers::GetRoot<GroupName::Group>(buf);
}

inline const GroupName::Group *GetSizePrefixedGroup(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<GroupName::Group>(buf);
}

inline bool VerifyGroupBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GroupName::Group>(nullptr);
}

inline bool VerifySizePrefixedGroupBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GroupName::Group>(nullptr);
}

inline void FinishGroupBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GroupName::Group> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGroupBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GroupName::Group> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace GroupName

#endif  // FLATBUFFERS_GENERATED_SCHEMA_GROUPNAME_H_
